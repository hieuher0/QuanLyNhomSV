/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ControllerImp;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Assignment;
import model.HomeWork;
import model.Pair;
import model.Student;

/**
 *
 * @author Hieu
 */
public class AssignmentFrm extends javax.swing.JFrame {

    /**
     * Creates new form Assingment
     */
    private List<Assignment> listAs;
    private DefaultTableModel modelAs;
    private ControllerImp controller;

    public AssignmentFrm() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        listAs = new ArrayList<>();
        modelAs = (DefaultTableModel) tabAssignment.getModel();
        controller = new ControllerImp();

        showAssignment();
    }

    public boolean addOrUpdateAssignment(Assignment a) {
        int id = a.getPairs().get(0).getHomeWork().getId();
        int totalSV = 0;
        for (Assignment as : listAs) {
            // Nếu sinh viên đã có thì update
            if (as.getStudent().getId() == a.getStudent().getId()) {
                for (int i = 0; i < as.getPairs().size(); i++) {
                    if (a.getPairs().get(0).getHomeWork().getId() == as.getPairs().get(i).getHomeWork().getId()) {
                        JOptionPane.showMessageDialog(rootPane, "Một sinh viên không thể tham gia 1 bài tập 2 lần");
                        return false;
                    }
                }

                for (Assignment las : listAs) {
                    for (Pair<HomeWork, Integer> pair : las.getPairs()) {
                        if (pair.getHomeWork().getId() == id) {
                            totalSV = pair.getTotalSV();
                            if (totalSV == 4) {
                                JOptionPane.showMessageDialog(rootPane, "Một bài tập không quá 4 sinh viên làm");
                                return false;
                            }
                            pair.setTotalSV(totalSV + 1);
                        }
                    }
                }

                a.getPairs().get(0).setTotalSV(totalSV + 1);
                as.addPairs(a.getPairs().get(0));
                controller.writeToFile(listAs, "PHANCONG.DAT");
                showData();
                return false;
            }
        }
        // cập nhật bài tập đã có sinh viên khác làm
        for (Assignment as : listAs) {
            for (Pair<HomeWork, Integer> pair : as.getPairs()) {
                if (pair.getHomeWork().getId() == id) {
                    totalSV = pair.getTotalSV();
                    if (totalSV == 4) {
                        JOptionPane.showMessageDialog(rootPane, "Một bài tập không quá 4 sinh viên làm");
                        return false;
                    }
                    pair.setTotalSV(totalSV + 1);
                }
            }
        }
        // thêm bài tập và sinh viên vào trong danh sách
        a.getPairs().get(0).setTotalSV(totalSV + 1);
        listAs.add(a);
        showData();
        controller.writeToFile(listAs, "PHANCONG.DAT");
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabAssignment = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboSort = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabAssignment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã bài tập", "Tên bài tập", "Mã sinh viên", "Tên sinh viên", "Số SV đã tham gia", "Số ngày SV tham gia"
            }
        ));
        jScrollPane1.setViewportView(tabAssignment);

        jButton1.setText("Thêm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Sắp xếp theo");

        comboSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Họ tên sinh viên", "Số ngày tham gia" }));
        comboSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSortActionPerformed(evt);
            }
        });

        jButton5.setText("Xóa");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setText("Hủy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(38, 38, 38)
                        .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(142, 142, 142)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(107, 107, 107))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(98, 98, 98))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new AddAssignmentFrm(this, rootPaneCheckingEnabled).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        showAssignment();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void comboSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSortActionPerformed
        // TODO add your handling code here:
        int selectIndex = comboSort.getSelectedIndex();
        if (selectIndex == 0) {
            controller.sortByName(listAs);
        } else if (selectIndex == 1) {
            controller.sortByTotalTime(listAs);
        }
        showData();
    }//GEN-LAST:event_comboSortActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int index = tabAssignment.getSelectedRow();
        if (index == -1) {
            JOptionPane.showMessageDialog(rootPane, "Chọn phân công muốn xóa");
        } else {
            int stt = 0;
            for (Assignment as : listAs) {
                for (Pair<HomeWork, Integer> pair : as.getPairs()) {
                    if (stt == index) {
                        deleteAssignment(as, pair);
                        showData();
                        return;
                    }
                    stt++;
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignmentFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignmentFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignmentFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignmentFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignmentFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboSort;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabAssignment;
    // End of variables declaration//GEN-END:variables

    private void showAssignment() {
        listAs = controller.readDataFromFile("PHANCONG.DAT");
        showData();
    }

    private void showData() {
        modelAs.setRowCount(0);
        int i = 1;
        for (Assignment as : listAs) {
            for (Pair<HomeWork, Integer> s : as.getPairs()) {
                modelAs.addRow(new Object[]{
                    s.getHomeWork().getId(), s.getHomeWork().getName(),
                    as.getStudent().getId(), as.getStudent().getTen(), s.getTotalSV(), as.getTotalTime()
                });
            }
        }
    }

    public <T> void deleteLinkToAssignment(T t) {
        if (t instanceof Student) {
            Student s = (Student) t;
            for (Assignment as : listAs) {
                if (as.getStudent().getId() == s.getId()) {
                    for (Pair<HomeWork, Integer> pair : as.getPairs()) {
                        for (Assignment listA : listAs) {
                            for (Pair<HomeWork, Integer> pair1 : listA.getPairs()) {
                                if (pair.getHomeWork().getId() == pair1.getHomeWork().getId()) {
                                    int totalSV = pair1.getTotalSV();
                                    pair1.setTotalSV(totalSV - 1);
                                }
                            }
                        }
                    }
                    listAs.remove(as);
                    break;
                }
            }
        }
        if (t instanceof HomeWork) {
            HomeWork h = (HomeWork) t;
            for (Assignment as : listAs) {
                for (Pair<HomeWork, Integer> pair : as.getPairs()) {
                    if (pair.getHomeWork().getId() == h.getId()) {
                        as.getPairs().remove(pair);
                        break;
                    }
                }
            }
        }
        controller.writeToFile(listAs, "PHANCONG.DAT");
    }

    private void deleteAssignment(Assignment as, Pair<HomeWork, Integer> pair) {
        as.getPairs().remove(pair);
        for (Assignment a : listAs) {
            for (Pair<HomeWork, Integer> pa : a.getPairs()) {
                if (pa.getHomeWork().getId() == pair.getHomeWork().getId()) {
                    int totalSV = pa.getTotalSV();
                    pa.setTotalSV(totalSV - 1);
                }
            }
        }
        controller.writeToFile(listAs, "PHANCONG.DAT");
    }
}
